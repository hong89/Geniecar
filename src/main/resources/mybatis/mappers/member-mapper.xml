<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rental.geniecar.member.dao.MemberDao">

	<insert id="insertMember" parameterType="memberVo">
		INSERT INTO MEMBER(ID, PW, NAME, GENDER, BIRTHDAY, HP, ADDRESS, ADDRESS_DETAIL, ZIP_CODE, JOIN_DATE, LAST_LOGIN_DATE, WITHDRAWAL_YN, TYPE, BRANCH_CODE) 
		VALUES (#{id}, #{pw}, #{name}, #{gender}, #{birthday}, #{hp}, #{address}, #{addressDetail}, #{zipCode}, SYSDATE, SYSDATE, 'N','U', #{branchCode})	 
	</insert>
	
	<select id="overlapped" parameterType="String" resultType="String">
		SELECT DECODE(COUNT(*), 1, 'true', 0, 'false')
		FROM MEMBER
		WHERE ID = #{id}
    </select>
    
    <select id="selectOne" parameterType="String" resultType="memberVo">
		SELECT * FROM MEMBER WHERE ID = #{id}
    </select>
    
    <update id="updateWithdrawalYn" parameterType="String">
		UPDATE MEMBER SET WITHDRAWAL_YN ='Y' WHERE ID = #{id}
	</update>
	
	<update id="updateMember" parameterType="memberVo">
		UPDATE MEMBER SET HP = #{hp}, ZIP_CODE = #{zipCode}, ADDRESS = #{address}, ADDRESS_DETAIL = #{addressDetail} WHERE ID= #{id}
	</update>
	
	<update id="updatePw" parameterType="memberVo">
		UPDATE MEMBER SET PW = #{pw} WHERE ID = #{id}
	</update>
	
	<select id="selectAllUser" resultType="memberVo" parameterType="com.rental.geniecar.domain.common.Pagination">
		SELECT NUM, ID ,PW ,NAME ,GENDER ,BIRTHDAY ,HP ,ADDRESS ,ADDRESS_DETAIL ,ZIP_CODE ,JOIN_DATE ,LAST_LOGIN_DATE ,WITHDRAWAL_YN ,
		BRANCH_CODE ,TYPE FROM (SELECT ROWNUM AS NUM, M.* FROM (SELECT * FROM MEMBER WHERE TYPE ='U' ORDER BY NAME) M)
		<if test="firstRecordIndex != null and lastRecordIndex != null">
            WHERE NUM BETWEEN #{firstRecordIndex} AND #{lastRecordIndex}
        </if>
    </select>
    <select id ="countUser" resultType="int" parameterType="com.rental.geniecar.domain.common.Pagination">
		SELECT COUNT(*) FROM MEMBER WHERE TYPE ='U'
	</select>
    
    <select id="selectAllBusiness" resultType="Map" parameterType="com.rental.geniecar.domain.common.Pagination">
		SELECT NUM, ID ,PW ,NAME ,GENDER ,BIRTHDAY ,HP ,ADDRESS ,ADDRESS_DETAIL ,ZIP_CODE ,JOIN_DATE ,LAST_LOGIN_DATE ,WITHDRAWAL_YN ,
		FN_COMM_NAME(BRANCH_CODE) AS BRANCH ,TYPE FROM (SELECT ROWNUM AS NUM, M.* FROM (SELECT * FROM MEMBER WHERE TYPE ='B' ORDER BY NAME) M)
		<if test="firstRecordIndex != null and lastRecordIndex != null">
            WHERE NUM BETWEEN #{firstRecordIndex} AND #{lastRecordIndex}
        </if>
    </select>
    
    <select id ="countBusiness" resultType="int" parameterType="com.rental.geniecar.domain.common.Pagination">
		SELECT COUNT(*) FROM MEMBER WHERE TYPE ='B'
	</select>
    
    <select id="selectWaiting" resultType="memberVo">
		SELECT * FROM MEMBER WHERE BRANCH_CODE IS NOT NUll and type = 'U'
	</select>
	
	<update id="updateType" parameterType="String">
		UPDATE MEMBER SET TYPE = 'B' WHERE ID = #{id}
	</update>
	
	<update id="updateWithdrawal">
		UPDATE MEMBER SET WITHDRAWAL_YN = 'K' WHERE ID = #{id}
	</update>
	
	<select id="allMyReservation" parameterType="String" resultType="com.rental.geniecar.domain.reservation.ReservationVo">
		SELECT RESERVATION_NO ,FN_COMM_NAME(RENTAL_PLACE) as RENTAL_PLACE_NAME,FN_COMM_NAME(RETURN_PLACE) as RETURN_PLACE_NAME,RENTAL_DATE ,
		RETURN_DATE ,CAR_IDENTIFICATION_NUMBER ,RENTAL_CAR_BRANCH_NO ,RESERVATION_MEMBER_ID ,REGULAR_PRICE ,SALE_RATE ,
		FINAL_RESERVATION_PRICE ,REG_ID ,REG_DATE ,MOD_ID ,MOD_DATE FROM RENTAL_CAR_RESERVATION WHERE RESERVATION_MEMBER_ID = #{id}
	</select>
	<select id="selectOneReservation"  parameterType="String" resultType="com.rental.geniecar.domain.reservation.ReservationVo">
		SELECT RESERVATION_NO ,FN_COMM_NAME(RENTAL_PLACE) as RENTAL_PLACE,FN_COMM_NAME(RETURN_PLACE) as RETURN_PLACE,RENTAL_DATE ,RETURN_DATE,
		CAR_IDENTIFICATION_NUMBER ,RENTAL_CAR_BRANCH_NO ,RESERVATION_MEMBER_ID ,REGULAR_PRICE ,SALE_RATE ,FINAL_RESERVATION_PRICE ,REG_ID ,
		REG_DATE ,MOD_ID ,MOD_DATE FROM RENTAL_CAR_RESERVATION WHERE RESERVATION_NO = #{reservationNo}
	</select>
</mapper>